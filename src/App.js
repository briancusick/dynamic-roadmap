// Code Generated by Sidekick is for learning and experimentation purposes only.
import React, { useState, useEffect } from 'react';
import { PieChart, Pie, Cell, Tooltip, Legend } from 'recharts';
import { fetchSheetData } from './utils';

const SHEET_CSV_URL = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQ3NYYR_UP6jKDx0bOovunIyb4brgSiNpTRipqxtymdC9ywSvB2Uf0TV1y-RN2FiUgyi565KkinVzP3/pub?gid=1161021045&single=true&output=csv'; // Replace with your own Sheet ID

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28EF5', '#F58EA2'];

function App() {
  const [data, setData] = useState([]);
  const [selectedLever, setSelectedLever] = useState(null);
  const [filterTime, setFilterTime] = useState('All');
  const [drillCap, setDrillCap] = useState(null);

  useEffect(() => {
    fetchSheetData(SHEET_CSV_URL).then(setData);
  }, []);

  // Get unique value levers and time dimensions
  const valueLevers = [...new Set(data.map(row => row['Value Lever']))];
  const timeDimensions = [...new Set(data.map(row => row['Time Dimension']))];

  // Aggregate data for pie chart
  const pieData = valueLevers.map(lever => ({
    name: lever,
    value: data.filter(row =>
      row['Value Lever'] === lever &&
      (filterTime === 'All' || row['Time Dimension'] === filterTime)
    ).length,
  })).filter(d => d.value > 0);

  // Capabilities for selected lever
  const capabilities = data.filter(row =>
    row['Value Lever'] === selectedLever &&
    (filterTime === 'All' || row['Time Dimension'] === filterTime)
  );

  return (
    <div style={{ display: 'flex', minHeight: '100vh', fontFamily: 'Arial, sans-serif' }}>
      <div style={{ width: 450, padding: 32 }}>
        <h2>Value Levers</h2>
        <PieChart width={400} height={400}>
          <Pie
            data={pieData}
            dataKey="value"
            nameKey="name"
            cx="50%"
            cy="50%"
            outerRadius={120}
            onClick={(_, idx) => setSelectedLever(pieData[idx].name)}
            onDoubleClick={(_, idx) => setSelectedLever(pieData[idx].name)}
          >
            {pieData.map((entry, index) => (
              <Cell key={index} fill={COLORS[index % COLORS.length]} cursor="pointer" />
            ))}
          </Pie>
          <Tooltip />
          <Legend />
        </PieChart>
        <div style={{ marginTop: 24 }}>
          <label>
            <strong>Filter by Time: </strong>
            <select value={filterTime} onChange={e => setFilterTime(e.target.value)}>
              <option value="All">All</option>
              {timeDimensions.map(time => (
                <option key={time} value={time}>{time}</option>
              ))}
            </select>
          </label>
        </div>
      </div>
      <div style={{ flex: 1, padding: 32, background: '#f8f9fa' }}>
        {!selectedLever && <div>Select a value lever to see capabilities.</div>}
        {selectedLever && !drillCap && (
          <>
            <h3>Capabilities for <span style={{ color: '#0088FE' }}>{selectedLever}</span></h3>
            {capabilities.length === 0 && <div>No capabilities found for this filter.</div>}
            {capabilities.map((cap, idx) => (
              <div
                key={idx}
                style={{
                  background: '#fff',
                  borderRadius: 8,
                  padding: 16,
                  marginBottom: 16,
                  boxShadow: '0 1px 4px rgba(0,0,0,0.07)',
                  cursor: 'pointer'
                }}
                onDoubleClick={() => setDrillCap(cap)}
                title="Double-click for more details"
              >
                <strong>{cap['Capability']}</strong>
                <p>{cap['Description']}</p>
                {cap['Image URL'] && (
                  <img
                    src={cap['Image URL']}
                    alt={cap['Capability']}
                    style={{ width: 120, borderRadius: 4, marginTop: 8 }}
                  />
                )}
              </div>
            ))}
            <div style={{ fontSize: 12, color: '#888' }}>
              Double-click a capability for more details.
            </div>
          </>
        )}
        {drillCap && (
          <div style={{
            background: '#fff',
            borderRadius: 8,
            padding: 24,
            boxShadow: '0 2px 8px rgba(0,0,0,0.13)',
            position: 'relative'
          }}>
            <button
              onClick={() => setDrillCap(null)}
              style={{
                position: 'absolute', top: 12, right: 12, border: 'none',
                background: '#eee', borderRadius: '50%', width: 32, height: 32, cursor: 'pointer'
              }}
              title="Close"
            >Ã—</button>
            <h3>{drillCap['Capability']}</h3>
            <p><strong>Time:</strong> {drillCap['Time Dimension']}</p>
            <p>{drillCap['Description']}</p>
            {drillCap['Image URL'] && (
              <img
                src={drillCap['Image URL']}
                alt={drillCap['Capability']}
                style={{ width: 240, borderRadius: 4, marginTop: 8 }}
              />
            )}
            {/* Add more details or elements as needed */}
          </div>
        )}
      </div>
    </div>
  );
}

export default App;
